
# 2023-06-08 일자 수업

class Basic_02:
    def __init__(self):
        # self.Review_Python_01();
        self.Basic_Python_01();

    # 복습 파일명: Review_***
    def Review_Python_01(self):
        """# Hello World!"""

        # Hello, world! 를 출력
        print("Hello, world!")
        print('Hello, world!')  # 작은 따옴표 - 언어마다 문자열로 인식되는 게 다름 (Java?)

        """* ' '(작은따옴표)로 묶은 부분 = 문자열
        * `print`는 값을 화면에 출력
        
        * `print`처럼 단어 뒤에 ( )(괄호)가 붙은 것 = 함수(function) : 정해진 일을 수행하는 단위
        * 함수는 `print('Hello, world!')`와 같이 함수 이름 `print`를 써주고, 괄호 안에 출력할 내용을 넣으면 함수가 실행
        * 함수 실행을 다른 말로는 함수를 호출(call)한다고 말하기도 함
        
        # 기본 문법
        
        ## 세미콜론 (;)
        * 많은 프로그래밍 언어들은 구문이 끝날 때 ;(세미콜론)을 붙여야 함 (JAVA, C...)
        * 하지만 파이썬은 세미콜론을 붙이지 않음
        """
        print("Hello, world! 세미콜론 있음");
        print("Hello, world! 세미콜론 없음")  # PyCharm에서 Ctrl + D는 지금 커서가 있는 줄 복사

        """* 단, 세미콜론을 붙여도 문법 에러는 발생하지 않음
        * 보통 한 줄에 여러 구문을 사용할 때 세미콜론으로 구분
        
        """
        print("안녕"); print("디지몬")


        """## 주석
        * 파이썬에서 사람만 알아볼 수 있도록 작성하는 부분을 *주석(comment)*라고 함
        * 즉, 주석은 파이썬 인터프리터(실행기)가 처리하지 않으므로 프로그램의 실행에는 영향을 주지 않음
        * 보통 주석은 코드에 대한 자세한 설명을 작성하거나, 특정 코드를 임시로 사용하지 않도록 만들 때 사용
        * 주석은 **한 줄 주석**과 **블록 주석** 두 가지가 있음
        * cf) 클린 코드
        
        ### 한 줄 주석
        """

        # Hello, world! 출력
        print(1234)  # 아무말...

        """* 코드 맨 앞에 #을 사용하면 해당 줄은 모두 주석이 됨
        * 따라서 다음 `print` 함수는 동작하지 않음
        """

        # Hello, world! 출력
        # print("Hello, world!") # ctrl + / : 해당 줄을 주석처리

        """* 코드 뒤에 #으로 주석을 작성할 수도 있음
        * 이때는 앞에 있는 코드만 정상적으로 동작하며 # 뒤에 있는 코드는 동작하지 않음
        """

        print('Hello, world!') # print('Show Me The Money')

        """* 주석 단축키 : `Ctrl + /`
        
        ### 블록 주석
        """

        # 작은따옴표 x3
        '''
        여러 줄 블록 주석을
        작은 따옴표나
        '''
        # 큰따옴표 x3
        """
        큰 따옴표로 작성할 수
        있습니다
        """

        """## 들여쓰기
        * 들여쓰기는 코드를 읽기 쉽도록 일정한 간격을 띄워서 작성하는 방법, 특히 파이썬은 들여쓰기 자체가 문법
        * 예를 들어 if의 다음 줄은 항상 들여쓰기를 해야 함
        * 만약 들여쓰기를 하지 않으면 문법 에러이므로 코드가 실행되지 않음
        """
        a = 20 # a라는 이름에 20이라는 값을 넣어줄 거다
        if a == 20: # a가 20인가?
        # print("a는 20입니다") # 에러 코드
            print("a는 20입니다") # 들여쓰기가 되어있어야 정상 실행이 된다


        """* 파이썬에서 들여쓰기 방법은 공백(스페이스) 2칸, 4칸, 탭(tab) 등 여러 가지 방법이 있음
        
        ## 코드 블록
        * 코드 블록은 특정한 동작을 위해서 코드가 모여 있는 상태를 뜻하며 파이썬은 들여쓰기를 기준으로 코드 블록을 구성
        {} <- 중괄호, () <- 소괄호, [] <- 대괄호, <> <- 꺾쇠
        """
        if a == 10:
            print("a는 10입니다01")
        print("a는 10입니다02")


        """* 단, 같은 블록은 들여쓰기 칸 수가 같아야 함"""
        if a == 10:
        # print("a는 10입니다01") # 오류 코드 <- 탭이 없어서 (코드 블록을 의미하는 들여쓰기가 없어서)
            print("a는 10입니다02")
                # print("a는 10입니다03") # 오류 코드 <- 탭이 하나더 많아서 (코드 블록도 없는데...) (indent)
    
    # 숫자 계산
    def Basic_Python_01(self):
        # 사칙연산
        # 덧셈
        print(1+1); # 2
        print(1+2); # 3
        print(1+2+3); # 6

        # 뺄셈
        print(5 - 1);  # 4
        print(1 - 5);  # -4

        # 곱셈 *
        print(2 * 4); # 8
        print(4 * 3); # 12

        # 나눗셈
        print(12 / 5) # 2.4

        # 중요 포인트
        # 파이썬의 경우 나눗셈 계산을 자동적으로 형변환 하여 지원해준다
        # 다른 언어인 경우에는 정수형으로 계산한다. 12 / 5  = 2

        # 파이썬 내장함수
        print(divmod(5,2)) # divmod(a,b) a와 b를 나눌시 몫과 나눗셈을 나누어 준다.

        # 실수의 계산
        # 덧셈

        # 컴퓨터의 0,1로  모든 값을 기억 -> 2의 배수의 값만 표시 가능
        # 10 -> 1010 / 소수점으로 내려 갈 시
        # 소수점 미만의 작은 오차가 생김
        # 해결법: math 함수로 계산 or 데이터 베이스 안에서 처리 or 웹사이트에서 처리
        print(5.1+2.3) # 7.3999999999999995

        # 뺄셈
        # 부동 소수점의 문제
        print(5.1 - 2.9) # 2.1999999999999997
        print(4.7 - 2.4)